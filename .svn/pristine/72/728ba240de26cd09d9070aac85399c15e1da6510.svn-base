package kr.or.ddit.management.partner.partner.web;

import java.util.List;
import javax.inject.Inject;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import kr.or.ddit.management.partner.partner.service.IPartnerManagementService;
import kr.or.ddit.partner.common.account.service.IPartnerAccountService;
import kr.or.ddit.partner.common.account.vo.PartnerVO;
import kr.or.ddit.partner.common.qna.service.IPartnerQnaService;
import kr.or.ddit.partner.common.qna.vo.PartnerQnaVO;
import kr.or.ddit.util.vo.PaginationVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/management/partner")
public class PartnerManagementController {
	
	@Inject
	private IPartnerManagementService service1;
	
	@Inject
	private IPartnerAccountService service2;

	@Inject
	private IPartnerQnaService service3;
	
	// 협력업체 신청 리스트 조회
	@GetMapping("/accountList")
	public String accountList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord,
			@RequestParam(required = false) String selectedItem,
			Model model
			) {
		log.info("accountList() 실행...!");

		PaginationVO<PartnerVO> pagingVO = new PaginationVO<PartnerVO>(10,5);
		PartnerVO countVO = service2.count();
		
		// 검색 기능 추가
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			pagingVO.setSearchType(searchType);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("searchType", searchType);
		}
		
        // 상태 필터링 추가
        if (StringUtils.isNotBlank(selectedItem)) {
            pagingVO.setSelectedItem(selectedItem);
            model.addAttribute("selectedItem", selectedItem);
        }
        
		// startRow, endRow, startPage, endPage를 결정한다.
		pagingVO.setCurrentPage(currentPage);
		// 총 게시글 수를 이용하여 총 페이지수를 결정하기 위해 총 게시글 수인 totalRecord를 얻어온다.
		int totalRecord = service2.accountCount(pagingVO);
		// totalPage를 결정한다.
		pagingVO.setTotalRecord(totalRecord);
		// 총 게시글 수 및 총 페이지 수, startRow, endRow의 값들을 이용하여 초기 1페이지에 들어있는 총 screenSize 개수만큼의 리스트 데이터를 가져온다.
		List<PartnerVO> dataList = service2.list(pagingVO);
		pagingVO.setDataList(dataList);
		
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("countVO", countVO);
		
		return "management/partner/accountList";
	}
	
	// 협력업체 신청 리스트 상세 조회
	@GetMapping("/accountDetail")
	public String accountDetail(int ptNo, Model model) {
		log.info("accountDetail() 실행...!");
		PartnerVO partnerVO = service2.detail(ptNo);
		model.addAttribute("partnerVO", partnerVO);
		return "management/partner/accountDetail";
	}
	
	// 협력업체 승인
	@PostMapping("/accountApprove")
	public String accountApprove(PartnerVO partnerVO, Model model, RedirectAttributes ra) {
		log.info("accountApproves() 실행...!");
		service2.approve(partnerVO);
		return "redirect:/management/partner/accountDetail?ptNo=" + partnerVO.getPtNo();
	}
	
	// 협력업체 수정 폼
	@GetMapping("/accountUpdate")
	public String accountUpdateForm(int ptNo, Model model) {
		log.info("accountUpdateForm() 실행...!");
		PartnerVO partnerVO = service2.detail(ptNo);
		model.addAttribute("partnerVO", partnerVO);
		return "management/partner/accountUpdate";
	}
	
	// 협력업체 수정
	@PostMapping("/accountUpdate")
	public String accountUpdate(PartnerVO partnerVO, Model model, RedirectAttributes ra) {
		log.info("accountUpdate() 실행...!");
		service2.update(partnerVO);
		ra.addFlashAttribute("msg", "수정");
		ra.addFlashAttribute("message", "수정이 완료되었습니다!");
	    return "redirect:/management/partner/accountDetail?ptNo=" + partnerVO.getPtNo();
	}
	
	// 협력업체 문의사항 리스트 조회
	@GetMapping("/qnaList")
	public String qnaList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord, Model model
			) {
		log.info("qnaList() 실행...!");

		PaginationVO<PartnerQnaVO> pagingVO = new PaginationVO<PartnerQnaVO>(10,5);
		
		// 검색 기능 추가
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			pagingVO.setSearchType(searchType);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("searchType", searchType);
		}
		// startRow, endRow, startPage, endPage를 결정한다.
		pagingVO.setCurrentPage(currentPage);
		// 총 게시글 수를 이용하여 총 페이지수를 결정하기 위해 총 게시글 수인 totalRecord를 얻어온다.
		int totalRecord = service3.qnaCount(pagingVO);
		// totalPage를 결정한다.
		pagingVO.setTotalRecord(totalRecord);
		// 총 게시글 수 및 총 페이지 수, startRow, endRow의 값들을 이용하여 초기 1페이지에 들어있는 총 screenSize 개수만큼의 리스트 데이터를 가져온다.
		List<PartnerQnaVO> dataList = service3.qnaList(pagingVO);
		pagingVO.setDataList(dataList);
		model.addAttribute("pagingVO", pagingVO);
		return "management/partner/qnaList";
	}
	
	// 협력업체 문의사항 리스트 상세 조회
	@GetMapping("/qnaDetail")
	public String qnaDetail(int qnaNo, Model model) {
		log.info("qnaDetail() 실행...!");
		PartnerQnaVO partnerQnaVO = service3.detail(qnaNo);
		model.addAttribute("partnerQnaVO", partnerQnaVO);
		return "management/partner/qnaDetail";
	}
	
}
