package kr.or.ddit.management.airService.notice.web;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.customer.notice.vo.UserFAQVO;
import kr.or.ddit.customer.notice.vo.UserNoticeVO;
import kr.or.ddit.management.airService.notice.service.IUNManagingService;
import kr.or.ddit.util.vo.FileVO;
import kr.or.ddit.util.vo.PaginationVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/management")
public class UNManagingController {
	
	@Inject
	private IUNManagingService unservice;
	
	@Resource(name="macUploadPath")
	private String macResourcePath;
	
	@Resource(name="winUploadPath")
	private String winResourcePath;
	
	private static String resourcePath;
	
	
	// userFAQ 시작
	
	@GetMapping("/userFAQ")
	public String userFAQManaging(Model model) {
		log.info("userFAQManaging() 실행...!");
		List<UserFAQVO> userFaqList = unservice.faqList();
		model.addAttribute("faqList", userFaqList);
		return "management/customerManagement/notice/userFAQ";
	}
	
	@ResponseBody
	@PostMapping("/userFAQ/update")
	public ResponseEntity<String> userFaqUpdate(@RequestBody UserFAQVO notice) {
	    log.info("userFaqUpdate() 실행..!");
	    unservice.faqUpdate(notice);
	    ResponseEntity<String> entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	    return entity;
	}
	
	@ResponseBody
	@PostMapping("/userFAQ/delete")
	public ResponseEntity<String> userFaqDelete(@RequestBody Map<String, Integer> data) {
	    log.info("userFaqDelete() 실행..!");
	    int faqNo = data.get("faqNo");  // JSON에서 faqNo 추출
	    unservice.faqDelete(faqNo);
	    ResponseEntity<String> entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	    return entity;
	}
	
	@ResponseBody
	@PostMapping("/userFAQ/add")
	public ResponseEntity<String> userFaqAdd(@RequestBody UserFAQVO notice) {
	    log.info("userFaqDelete() 실행..!");
	    unservice.faqAdd(notice);
	    ResponseEntity<String> entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	    return entity;
	}
	
	// userFAQ 끝
	
	
	// userNotice 시작
	
	@GetMapping("userNotice/list")
	public String userNoticeList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord, Model model
			) {
		log.info("userNoticeList() 실행...!");

		PaginationVO<UserNoticeVO> pagingVO = new PaginationVO<UserNoticeVO>(10,5);
		
		// 검색 기능 추가
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			pagingVO.setSearchType(searchType);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("searchType", searchType);
		}
		// startRow, endRow, startPage, endPage를 결정한다.
		pagingVO.setCurrentPage(currentPage);
		// 총 게시글 수를 이용하여 총 페이지수를 결정하기 위해 총 게시글 수인 totalRecord를 얻어온다.
		int totalRecord = unservice.userNoticeCount(pagingVO);
		// totalPage를 결정한다.
		pagingVO.setTotalRecord(totalRecord);
		// 총 게시글 수 및 총 페이지 수, startRow, endRow의 값들을 이용하여 초기 1페이지에 들어있는 총 screenSize 개수만큼의 리스트 데이터를 가져온다.
		List<UserNoticeVO> dataList = unservice.userNoticeList(pagingVO);
		pagingVO.setDataList(dataList);
		model.addAttribute("pagingVO", pagingVO);
		return "management/customerManagement/notice/userNotice";
	}
	
	@GetMapping("/userNotice/register")
	public String userNoticeForm() {
		log.info("userNoticeForm() 실행...!");
		return "management/customerManagement/notice/userNoticeRegister";
	}
	
	@PostMapping("/userNotice/register")
	public String userNoticeRegister(@RequestParam("UNFile") MultipartFile file, UserNoticeVO userNoticeVO, Model model, FileVO fileVO, RedirectAttributes ra) throws Exception {
		log.info("userNoticeRegister() 실행...!");
		
		String fileSavename = uploadUNFile(file.getOriginalFilename(), file.getBytes());
		
		// os확인 하여 저장경로 결정
		String os = System.getProperty("os.name").toLowerCase();
		if(os.contains("win")) {
			resourcePath = winResourcePath;
		}
		if(os.contains("mac")) {
			resourcePath = macResourcePath;
		}
		
		//  파일 확장자
		String fileMime = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(".") + 1);
		
		String fileYN = "00";
		
		log.info(file.getOriginalFilename());
		
		if(file.getOriginalFilename() != null && file.getOriginalFilename() != "") {
			fileYN = "02";
		}
		
		userNoticeVO.setNoFilecode(fileYN);
		
		
		unservice.noticeAdd(userNoticeVO);
		
		fileVO.setFileOwner(fileYN+userNoticeVO.getNoNo());
		fileVO.setFileSavepath(resourcePath);
		fileVO.setFileSize(file.getSize());
		fileVO.setFileMime(fileMime);
		fileVO.setFileRealname(file.getOriginalFilename());
		fileVO.setFileSavename(fileSavename);
		
		unservice.saveFile(fileVO);
		ra.addFlashAttribute("msg", "등록");
		ra.addFlashAttribute("message", "등록이 완료되었습니다.");
		return "redirect:/management/userNotice/list";
	}
	
	@GetMapping("/userNotice/detail")
	public String userNoticeDetail(int noNo, Model model) {
		log.info("userNoticeDetail() 실행...!");
		UserNoticeVO userNoticeVO = unservice.noticeDetail(noNo);
		FileVO fileVO = unservice.takeNoticeFile(noNo);
		model.addAttribute("fileVO", fileVO);
		model.addAttribute("userNoticeVO", userNoticeVO);
		return "management/customerManagement/notice/userNoticeDetail";
	}
	
	@PostMapping("/userNotice/delete")
	public String userNoticeDelete(int noNo, Model model, RedirectAttributes ra) {
		log.info("userNoticeDelete() 실행...!");
		unservice.noticeDelete(noNo);
		ra.addFlashAttribute("msg", "삭제");
		ra.addFlashAttribute("message", "삭제가 완료되었습니다!");
		return "redirect:/management/userNotice/list";
	}
	
	@GetMapping("/userNotice/update")
	public String userNoticeUpdateForm(int noNo, Model model) {
		log.info("userNoticeUpdateForm() 실행...!");
		UserNoticeVO userNoticeVO = unservice.noticeDetail(noNo);
		model.addAttribute("userNoticeVO", userNoticeVO);
		return "management/customerManagement/notice/userNoticeUpdate";
	}
	
	@PostMapping("/userNotice/update")
	public String userNoticeUpdate(UserNoticeVO userNoticeVO, Model model) {
		log.info("qnaUpdate() 실행...!");
		unservice.noticeUpdate(userNoticeVO);
		model.addAttribute("msg", "수정이 완료되었습니다!");
	    return "redirect:/management/userNotice/detail?noNo=" + userNoticeVO.getNoNo();
	}
	
	// userNotice 끝
	
	
	// userQnA 시작
	

	
	
	//파일 업로드
		private String uploadUNFile(String originalFilename, byte[] bytes) throws Exception {
			log.info("uploadFile in...!");
			UUID uuid = UUID.randomUUID();		// UUID로 파일명 생성
			// UUID_원본 파일명
			String createdFileName = uuid.toString() + "_" + originalFilename;
			// os확인 하여 저장경로 결정
			String os = System.getProperty("os.name").toLowerCase();
			if(os.contains("win")) {
				resourcePath = winResourcePath;
			}
			if(os.contains("mac")) {
				resourcePath = macResourcePath;
			}
			
			// resourcePath 활용
			File file = new File(resourcePath);
			if(!file.exists()) {
				file.mkdirs();
			}
			File target = new File(resourcePath, createdFileName);  // 파일 업로드 준비
			FileCopyUtils.copy(bytes, target);  //	파일 복사
			return createdFileName;
		}
}



