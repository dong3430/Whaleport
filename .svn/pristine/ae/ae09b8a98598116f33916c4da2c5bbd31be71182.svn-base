package kr.or.ddit.management.partner.partner.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.mail.internet.MimeMessage;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.View;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import kr.or.ddit.partner.common.account.service.IPartnerAccountService;
import kr.or.ddit.partner.common.account.vo.PartnerVO;
import kr.or.ddit.partner.common.qna.web.QnaDownloadView;
import kr.or.ddit.util.vo.FileVO;
import kr.or.ddit.util.vo.PaginationVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/management/partner/account")
public class ManagementPartnerAccountController {
	
	@Autowired
	JavaMailSenderImpl mailSender;
	
	@Inject
	private IPartnerAccountService service;

	// 협력업체 신청 리스트 조회
	@GetMapping("/accountList")
	public String accountList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord,
			@RequestParam(required = false) String selectedItem,
			Model model
			) {
		log.info("accountList() 실행...!");

		PaginationVO<PartnerVO> pagingVO = new PaginationVO<PartnerVO>(10,5);
		PartnerVO countVO = service.count();
		
		// 검색 기능 추가
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			pagingVO.setSearchType(searchType);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("searchType", searchType);
		}
		
        // 상태 필터링 추가
        if (StringUtils.isNotBlank(selectedItem)) {
            pagingVO.setSelectedItem(selectedItem);
            model.addAttribute("selectedItem", selectedItem);
        }
        
		// startRow, endRow, startPage, endPage를 결정한다.
		pagingVO.setCurrentPage(currentPage);
		// 총 게시글 수를 이용하여 총 페이지수를 결정하기 위해 총 게시글 수인 totalRecord를 얻어온다.
		int totalRecord = service.accountCount(pagingVO);
		// totalPage를 결정한다.
		pagingVO.setTotalRecord(totalRecord);
		// 총 게시글 수 및 총 페이지 수, startRow, endRow의 값들을 이용하여 초기 1페이지에 들어있는 총 screenSize 개수만큼의 리스트 데이터를 가져온다.
		List<PartnerVO> dataList = service.list(pagingVO);
		pagingVO.setDataList(dataList);
		
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("countVO", countVO);
		
		return "management/partner/accountList";
	}
	
	// 협력업체 신청 리스트 상세 조회
	@GetMapping("/accountDetail")
	public String accountDetail(PartnerVO partnerVO, Model model) {
		log.info("accountDetail() 실행...!");
		PartnerVO partnerVO2 = service.detail(partnerVO);
		model.addAttribute("partnerVO", partnerVO2);
		return "management/partner/accountDetail";
	}
	
	// 협력업체 승인
	@PostMapping("/accountApprove")
	public String accountApprove(PartnerVO partnerVO, Model model, RedirectAttributes ra) {
		log.info("accountApproves() 실행...!");
		service.approve(partnerVO);
		return "redirect:/management/partner/account/accountDetail?ptNo=" + partnerVO.getPtNo();
	}
	
	// 협력업체 아이디 발급
	@PostMapping("/accountIdIssue")
	public String accountIdIssue(PartnerVO partnerVO, Model model, RedirectAttributes ra) {
		log.info("accountIdIssue() 실행...!");
		service.idIssue(partnerVO);
		return "redirect:/management/partner/account/accountDetail?ptNo=" + partnerVO.getPtNo();
	}
	
	// 협력업체 수정 폼
	@GetMapping("/accountUpdate")
	public String accountUpdateForm(PartnerVO partnerVO, Model model) {
		log.info("accountUpdateForm() 실행...!");
		PartnerVO partnerVO2 = service.detail(partnerVO);
		model.addAttribute("partnerVO", partnerVO2);
		return "management/partner/accountUpdate";
	}
	
	// 협력업체 수정
	@PostMapping("/accountUpdate")
	public String accountUpdate(PartnerVO partnerVO, Model model, RedirectAttributes ra) {
		log.info("accountUpdate() 실행...!");
		service.update(partnerVO);
		 log.info("PartnerVO 값: {}", partnerVO); // toString() 메서드 호출
		ra.addFlashAttribute("msg", "수정");
		ra.addFlashAttribute("message", "수정이 완료되었습니다!");
	    return "redirect:/management/partner/account/accountDetail?ptNo=" + partnerVO.getPtNo();
	}
	
	// 다운로드
	@GetMapping("/download")
	public View download(int fileNo, ModelMap model) {
		log.info("download()실행...!");
		FileVO ptFileVO = service.ptDownload(fileNo);
		
		Map<String, Object> ptFileMap = new HashMap<String, Object>();
		
		ptFileMap.put("fileRealname", ptFileVO.getFileRealname());
		ptFileMap.put("fileSize", ptFileVO.getFileSize());
		ptFileMap.put("fileSavepath", ptFileVO.getFileSavepath());
		model.addAttribute("ptFileMap", ptFileMap);
		
		return new PtDownloadView();
	}
	
	// 이메일 발송
	@ResponseBody
	@PostMapping("/sendEmail")
	public int sendEmail(PartnerVO partnerVO, Model model, RedirectAttributes ra) {
	    
	    // 이메일 보낼 양식
	    final String setFrom = "seonye0ng@naver.com"; // 보내는 사람 이메일
	    String toMail = partnerVO.getPtMgremail();
	    String title = "[WHALEPORT] 협력업체 아이디 발급 이메일 입니다.";
	    String content = "안녕하세요.<br>" +
	                     "WhalePort의 협력업체가 되신 것을 환영합니다!<br>" +
	                     "<br>" +
	                     "아래는 귀하의 계정 정보입니다.<br>" +
	                     "<br>" +
	                     "아이디: " + partnerVO.getPtId() + "<br>" +
	                     "비밀번호: " + partnerVO.getPtPw() + "<br>" +
	                     "<br>" +
	                     "이제 WhalePort의 다양한 서비스를 이용하실 수 있습니다.<br>" +
	                     "궁금한 점이 있으시면 언제든지 문의해 주세요.<br>" +
	                     "<br>" +
	                     "감사합니다.<br>" +
	                     "<br>" +
	                     "WhalePort 드림";

	    try {
	        // 이메일 유효성 검사 (간단한 정규 표현식 사용)
	        if (!isValidEmail(toMail)) {
	            log.error("Invalid email address: " + toMail);
	            return 0; // 유효하지 않은 이메일 주소
	        }

	        MimeMessage message = mailSender.createMimeMessage();
	        MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");
	        helper.setFrom(setFrom);
	        helper.setTo(toMail);
	        helper.setSubject(title);
	        helper.setText(content, true);
	        mailSender.send(message);
	        
	        log.info("이메일이 성공적으로 전송되었습니다: " + toMail);
	        return 1; // 이메일 전송 성공
	    } catch (Exception e) {
	        log.error("이메일 전송 실패: " + e.getMessage());
	        e.printStackTrace();
	        return 0; // 이메일 전송 실패
	    }
	}

	// 이메일 유효성 검사 메서드
	private boolean isValidEmail(String email) {
	    String emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$"; // 간단한 이메일 정규식
	    return email.matches(emailRegex);
	}



	
}
