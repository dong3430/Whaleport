package kr.or.ddit.partner.common.account.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;
import org.springframework.stereotype.Service;

import kr.or.ddit.partner.common.account.mapper.PartnerAccountMapper;
import kr.or.ddit.partner.common.account.service.IPartnerAccountService;
import kr.or.ddit.partner.common.account.vo.PartnerVO;
import kr.or.ddit.util.vo.FileVO;
import kr.or.ddit.util.vo.PaginationVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class PartnerAccountServiceImpl implements IPartnerAccountService {
	
	@Inject
	private PartnerAccountMapper mapper;
	
	@Resource(name="winUploadPath")
	private String winResourcePath;
	
	@Resource(name = "macUploadPath")
	private String macResourcePath;
	
	private static String resourcePath;

	@Override
	public int register(PartnerVO partnerVO) {
		log.info("# PartnerAccountServiceImpl register");
		
		if (partnerVO.getPtFile()[0].getSize() !=0) {
			partnerVO.setPtFilecode("10");
		}else {
			partnerVO.setPtFilecode("00");
		}
		
		int result = mapper.register(partnerVO);
		
		if(result > 0) {
			List<FileVO> ptFileList = partnerVO.getPtFileList();			
			ptFileUpload(ptFileList, partnerVO.getPtNo());
			result = 1;
		}else {
			result = 0;
		}
		return result;
	}

	private void ptFileUpload(List<FileVO> ptFileList, int ptNo) {
		
		String os = System.getProperty("os.name").toLowerCase();
		if(os.contains("win")) {
			resourcePath = winResourcePath;
		}
		if(os.contains("mac")) {
			resourcePath = macResourcePath;
		}
		
		resourcePath += "/partnerQna/";

		for(FileVO fileVO : ptFileList) {
			String fileSavename = UUID.randomUUID().toString();		// UUID의 랜덤 파일명 생성
			fileSavename += "_" + fileVO.getFileRealname();
			
			String fileSavepath = resourcePath + ptNo;
			File file = new File(fileSavepath);
			if(!file.exists()) {
				file.mkdirs();
			}
			
			fileSavepath += "/" + fileSavename;
			
			// 첨부파일 테이블 - 첨부파일소유자 (협력업체계정신청 10)
			fileVO.setFileOwner("10" + ptNo);
			fileVO.setFileSavepath(fileSavepath);
			fileVO.setFileSavename(fileSavename);
			mapper.insertPtFile(fileVO);
			
			File saveFile = new File(fileSavepath);
			
			try {
				fileVO.getItem().transferTo(saveFile);
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
			}
			
		}
		
	}

	@Override
	public int accountCount(PaginationVO<PartnerVO> pagingVO) {
		log.info("# PartnerQnaServiceImpl accountCount");
		return mapper.accountCount(pagingVO);
	}

	@Override
	public List<PartnerVO> list(PaginationVO<PartnerVO> pagingVO) {
		log.info("# PartnerQnaServiceImpl list");
		return mapper.list(pagingVO);
	}

	@Override
	public PartnerVO detail(int ptNo) {
		log.info("# PartnerQnaServiceImpl detail");
		return mapper.detail(ptNo);
	}

	@Override
	public void update(PartnerVO partnerVO) {
		log.info("# PartnerAccountServiceImpl update");
		mapper.update(partnerVO);
	}

	@Override
	public void approve(PartnerVO partnerVO) {
		log.info("# PartnerAccountServiceImpl approve");
		mapper.approve(partnerVO);
	}

	@Override
	public PartnerVO count() {
		log.info("# PartnerQnaServiceImpl count");
		return mapper.count();
	}

	@Override
	public void idIssue(PartnerVO partnerVO) {
		log.info("# PartnerAccountServiceImpl idIssue");
		mapper.idIssue(partnerVO);
	}

}
