package kr.or.ddit.common.mypage.service.impl;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.common.login.vo.LoginCommonVO;
import kr.or.ddit.common.mypage.mapper.CommMyPageMapper;
import kr.or.ddit.common.mypage.service.CommMyPageService;
import kr.or.ddit.common.mypage.web.ServiceResult;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class CommMyPageServiceImpl implements CommMyPageService {
	
	@Inject
	private CommMyPageMapper commMapper;
	
	@Inject
	private PasswordEncoder pe;
	
	// 직원 정보 수정
//	@Override
//	public ServiceResult updateProfile(HttpServletRequest req, LoginCommonVO loginCommonVO) {
//		loginCommonVO.setEmpPw(pe.encode(loginCommonVO.getEmpDepw()));
//		ServiceResult result = null;
//		
//		String uploadPath = req.getServletContext().getRealPath("/resources/profile");
//		File file = new File(uploadPath);
//		
//		if(!file.exists()) {
//			file.mkdirs();
//		}
//		
//		String profileImg = "";	// 회원정보에 추가할 프로필 이미지 경로
//		
//		try {
//			MultipartFile profileImgFile = loginCommonVO.getImgFile();	// 넘겨받은 회원정보에서 프로필 데이터 가져오기
//			
//			if(profileImgFile != null && profileImgFile.getOriginalFilename() != null &&
//					!profileImgFile.getOriginalFilename().equals("")) {
//				String fileName = UUID.randomUUID().toString();			// UUID 파일명 생성
//				fileName += "_" + profileImgFile.getOriginalFilename();	// UUID_원본파일명
//				uploadPath += "/" + fileName;							// 업로드 하기 위한 경로 생성(/resources/profile/UUID_원본파일명)
//				profileImgFile.transferTo(new File(uploadPath));		// 파일 복사
//				profileImg = "/resources/profile/" + fileName;			// 파일 복사가 일어난 파일의 위치로 접근하기 위한 URI 설정
//			}
//			loginCommonVO.setEmpImage(profileImg);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		
//		int status = commMapper.updateProfile(loginCommonVO);
//		if(status > 0) {
//			result = ServiceResult.OK;
//		}else {
//			result = ServiceResult.FAILED;
//		}
//		return result;
//	}
	
	
	@Override
	public ServiceResult updateProfile(HttpServletRequest req, LoginCommonVO loginCommonVO) {
	    // 비밀번호 변경 여부를 확인하기 위해 empDepw 값을 가져옵니다.
		String empDepw = loginCommonVO.getEmpDepw();
	    
	    // empDepw가 null이거나 빈 문자열이 아닐 경우에만 암호화합니다.
	    if (empDepw != null && !empDepw.isEmpty()) {
	        String encodedPassword = pe.encode(empDepw);
	        loginCommonVO.setEmpPw(encodedPassword);  // empDepw를 암호화하여 empPw에 저장
	        System.out.println("Encoded Password (empPw): " + encodedPassword);
	    } else {
	        // 비밀번호를 변경하지 않는 경우, 기존 비밀번호를 유지
	        loginCommonVO.setEmpPw(null); // 비밀번호를 업데이트하지 않기 위해 null로 설정
	    }

	    ServiceResult result = null;

	    String uploadPath = req.getServletContext().getRealPath("/resources/profile");
	    File file = new File(uploadPath);

	    if (!file.exists()) {
	        file.mkdirs();
	    }

	    String profileImg = "";  // 회원정보에 추가할 프로필 이미지 경로

	    try {
	        MultipartFile profileImgFile = loginCommonVO.getImgFile(); // 넘겨받은 회원정보에서 프로필 데이터 가져오기
	        
	        if (profileImgFile != null && profileImgFile.getOriginalFilename() != null &&
	                !profileImgFile.getOriginalFilename().equals("")) {
	            String fileName = UUID.randomUUID().toString();           // UUID 파일명 생성
	            fileName += "_" + profileImgFile.getOriginalFilename();   // UUID_원본파일명
	            uploadPath += "/" + fileName;                             // 업로드 하기 위한 경로 생성(/resources/profile/UUID_원본파일명)
	            profileImgFile.transferTo(new File(uploadPath));         // 파일 복사
	            profileImg = "/resources/profile/" + fileName;           // 파일 복사가 일어난 파일의 위치로 접근하기 위한 URI 설정
	        }
	        loginCommonVO.setEmpImage(profileImg);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }

	    // 프로필 업데이트 쿼리 실행
	    int status = commMapper.updateProfile(loginCommonVO);
	    if (status > 0) {
	        result = ServiceResult.OK;
	    } else {
	        result = ServiceResult.FAILED;
	    }
	    return result;
	}

}
