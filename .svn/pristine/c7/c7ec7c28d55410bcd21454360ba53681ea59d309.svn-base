package kr.or.ddit.management.info.notice.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.customer.notice.vo.UserNoticeVO;
import kr.or.ddit.management.info.notice.mapper.IEmpNoticeMapper;
import kr.or.ddit.management.info.notice.service.IEmpNoticeService;
import kr.or.ddit.util.vo.FileVO;
import kr.or.ddit.util.vo.PaginationVO;

@Service
public class EmpNoticeServiceImpl implements IEmpNoticeService {
	
	@Inject
	private IEmpNoticeMapper noticeMapper;
	
	@Resource(name="winUploadPath")
	private String winResourcePath;
	
	@Resource(name = "macUploadPath")
	private String macResourcePath;
	
	private static String resourcePath;
	

	@Override
	public int selectEmpNoticeCount(PaginationVO<UserNoticeVO> pagingVO) {
		return noticeMapper.selectEmpNoticeCount(pagingVO);
	}

	@Override
	public List<UserNoticeVO> selectEmpNoticeList(PaginationVO<UserNoticeVO> pagingVO) {
		return noticeMapper.selectEmpNoticeList(pagingVO);
	}

	@Override
	public UserNoticeVO selectEmpNotice(int noNo) {
//		noticeMapper.incrementHit(noNo);
		return noticeMapper.selectEmpNotice(noNo);
	}

	@Override
	public int insertEmpNotice(UserNoticeVO noticeVO) {
		
		int result = noticeMapper.insertEmpNotice(noticeVO);
		if(result > 0) {
			List<FileVO> noticeFileList = noticeVO.getNoticeFileList();
			
			noticeFileUpload(noticeFileList, noticeVO.getNoNo());
		}else {
			result = 0;
		}
		return result;
	}

	private void noticeFileUpload(List<FileVO> noticeFileList, int noNo) {

		String os = System.getProperty("os.name").toLowerCase();
		if(os.contains("win")) {
			resourcePath = winResourcePath;
		}
		if(os.contains("mac")) {
			resourcePath = macResourcePath;
		}
		
		resourcePath+="/empNotice/";
		
		for (FileVO fileVO : noticeFileList) {
			String fileSavename = UUID.randomUUID().toString();
			fileSavename+="_"+fileVO.getFileRealname();
			
			String fileSavepath = resourcePath+noNo;
			File file = new File(fileSavepath);
			if(!file.exists()) {
				file.mkdirs();
			}
			
			fileSavepath += "/"+fileSavename;
			
			// 공지첨부파일 02
			fileVO.setFileOwner("02"+noNo);
			fileVO.setFileSavepath(fileSavepath);
			fileVO.setFileSavename(fileSavename);
			noticeMapper.insertEmpNoticeFile(fileVO);
			
			File saveFile = new File(fileSavepath);
			
			try {
				fileVO.getItem().transferTo(saveFile);
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
			}
			
		}
		
	}

	@Override
	public FileVO empNoticeDownload(int fileNo) {
		FileVO noticeFileVO = noticeMapper.empNoticeDownload(fileNo);
		if(noticeFileVO == null) {
			throw new RuntimeException();
		}
		
		noticeMapper.incrementEmpNoticeFileDown(fileNo);
		
		
		return noticeFileVO;
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
