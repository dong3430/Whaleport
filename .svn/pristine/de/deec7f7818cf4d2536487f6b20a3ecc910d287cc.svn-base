package kr.or.ddit.partner.facilities.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;
import org.springframework.stereotype.Service;

import kr.or.ddit.partner.common.account.vo.PartnerVO;
import kr.or.ddit.partner.facilities.mapper.PartnerInspectionMapper;
import kr.or.ddit.partner.facilities.service.IPartnerInspectionService;
import kr.or.ddit.partner.facilities.vo.PartnerInspectionVO;
import kr.or.ddit.util.vo.FileVO;
import kr.or.ddit.util.vo.PaginationVO;

@Service
public class PartnerInspectionServiceImpl implements IPartnerInspectionService{

	@Inject
	private PartnerInspectionMapper mapper;
	
	@Resource(name="winUploadPath")
	private String winResourcePath;
	
	@Resource(name = "macUploadPath")
	private String macResourcePath;
	
	private static String resourcePath;
		
	@Override
	public int reportRegister(PartnerInspectionVO inspectionVO) {
		
		int result = mapper.reportRegister(inspectionVO);
		
		if(result > 0) { // 등록 성공
			result = 1;
	    } else { // 등록 실패
	        result = 0;
	    }
	    return result;
	}
	
	
	@Override
	public List<PartnerInspectionVO> reportList(PaginationVO<PartnerInspectionVO> pagingVO) {
		return mapper.reportList(pagingVO);
	}
	
	@Override
	public List<PartnerInspectionVO> reportList2(PaginationVO<PartnerInspectionVO> pagingVO) {
		return mapper.reportList2(pagingVO);
	}
	
	@Override
	public int reportCount(PaginationVO<PartnerInspectionVO> pagingVO) {
		return mapper.reportCount(pagingVO);
	}
	
	@Override
	public int reportCount2(PaginationVO<PartnerInspectionVO> pagingVO) {
		return mapper.reportCount2(pagingVO);
	}

	@Override
	public PartnerInspectionVO reportDetail(PartnerInspectionVO inspectionVO) {
		String fileOwner = "08"+ inspectionVO.getInNo();
		inspectionVO.setFileOwner(fileOwner);
		return mapper.reportDetail(inspectionVO);
	}

	@Override
	public int scheduleRegister(PartnerInspectionVO inspectionVO) {
		
		int result = mapper.scheduleRegister(inspectionVO);
		
		if(result > 0) { // 등록 성공
			result = 1;
	    } else { // 등록 실패
	        result = 0;
	    }
	    return result;
	}
	
//
//	@Override
//	public int update(PartnerQnaVO partnerQnaVO) {
//		log.info("# PartnerQnaServiceImpl update");
//		
//		if (partnerQnaVO.getQnaFile()[0].getSize() !=0) {
//			partnerQnaVO.setQueFilecode("03");
//		}else {
//			partnerQnaVO.setQueFilecode("00");
//		}
//		
//		int result = mapper.update(partnerQnaVO);
//
//		if(result > 0) {
//			List<FileVO> qnaFileList = partnerQnaVO.getQnaFileList();
//			
//			qnaFileUpload(qnaFileList, partnerQnaVO.getQnaNo());
//			
//			Integer [] delQnaNo = partnerQnaVO.getDelQnaNo();
//			
//			if(delQnaNo != null) {
//				for (int i = 0; i < delQnaNo.length; i++) {
//					FileVO qnaFileVO = mapper.selectQnaFile(delQnaNo[i]);
//					mapper.deleteQnaFile(delQnaNo[i]);
//					File file = new File(qnaFileVO.getFileSavepath());
//					file.delete();
//				}
//			}
//			 result = 1;
//			
//		}else {
//			result = 0;
//		}
//		return result;
//	}
//		
//	@Override
//	public int delete(int qnaNo) {
//		return mapper.delete(qnaNo);
//	}
//
//	@Override
//	public FileVO qnaDownload(int fileNo) {
//		log.info("# PartnerQnaServiceImpl qnaDownload");
//		FileVO qnaFileVO = mapper.qnaDownload(fileNo);
//		if(qnaFileVO == null) {
//			throw new RuntimeException();
//		}
//		
//		mapper.incrementQnaFileDown(fileNo);
//		
//		return qnaFileVO;
//	}
//
//	@Override
//	public int answer(PartnerQnaVO partnerQnaVO) {
//	    log.info("# PartnerQnaServiceImpl answer");
//	    
//	    // 답변 처리
//	    int result = mapper.answer(partnerQnaVO);
//	    
//	    if(result > 0) {
//	        result = 1;
//	    } else {
//	        result = 0;
//	    }
//	    return result;
//	}
//
//	@Override
//	public List<PartnerFaqVO> faqList() {
//		return mapper.faqList();
//	}
//
//	@Override
//	public int register(PartnerFaqVO partnerFaqVO) {
//		
//		int result = mapper.faqRegister(partnerFaqVO);
//		
//		if(result > 0) { // 등록 성공
//			result = 1;
//	    } else { // 등록 실패
//	        result = 0;
//	    }
//	    return result;
//	}
//	
//	@Override
//	public int faqDelete(int faqNo) {
//		
//		int result = mapper.faqDelete(faqNo);
//		
//		if(result > 0) { 
//			result = 1;
//		} else { 
//			result = 0;
//		}
//		return result;
//	}
//	
//	@Override
//	public int faqUpdate(PartnerFaqVO partnerFaqVO) {
//		
//		int result = mapper.faqUpdate(partnerFaqVO);
//		
//		if(result > 0) { 
//			result = 1;
//	    } else { 
//	        result = 0;
//	    }
//	    return result;
//	}

}